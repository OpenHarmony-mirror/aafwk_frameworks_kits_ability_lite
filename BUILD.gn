# Copyright (c) 2020 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/lite/config/component/lite_component.gni")
import("//build/lite/config/subsystem/aafwk/config.gni")
import("//build/lite/ndk/ndk.gni")

generate_notice_file("ability_notice_file") {
    module_name = "ability"
    module_source_dir_list = [
        "//third_party/bounds_checking_function",
        "//third_party/cJSON",
    ]
}

lite_library("ability") {
    target_type = "shared_library"
    cflags = [
        "-Wall",
        "-Wno-format",
        "-Wno-format-extra-args",
    ]
    cflags_cc = cflags

    sources = [
        "src/ability.cpp",
        "src/ability_context.cpp",
        "src/ability_env.cpp",
        "src/ability_env_impl.cpp",
        "src/ability_event_handler.cpp",
        "src/ability_loader.cpp",
        "src/ability_scheduler.cpp",
        "src/ability_thread.cpp",
        "src/ability_main.cpp",
    ]

    if (enable_ohos_appexecfwk_feature_ability == true) {
        sources += [
            "src/ability_slice.cpp",
            "src/ability_slice_manager.cpp",
            "src/ability_slice_route.cpp",
            "src/ability_slice_scheduler.cpp",
            "src/ability_slice_stack.cpp",
            "src/ability_window.cpp",
        ]
    }

    public_deps = [
        "//base/hiviewdfx/frameworks/hilog_lite/featured:hilog_shared",
        "//foundation/appexecfwk/frameworks/bundle_lite:bundle",
        "//foundation/communication/frameworks/ipc_lite:liteipc_adapter",
        "//foundation/aafwk/frameworks/abilitymgr_lite:abilitymanager",
    ]

    include_dirs = [
        "//foundation/aafwk/frameworks/abilitymgr_lite/include",
        "//foundation/aafwk/frameworks/want_lite/include",
        "//foundation/aafwk/interfaces/innerkits/abilitymgr_lite",
        "//foundation/aafwk/interfaces/kits/want_lite",
        "//foundation/aafwk/interfaces/kits/ability_lite",
        "//foundation/appexecfwk/utils/bundle_lite",
        "//foundation/appexecfwk/interfaces/kits/bundle_lite",
        "//foundation/appexecfwk/frameworks/bundle_lite/include",
        "//foundation/graphic/lite/interfaces/kits/surface",
        "//foundation/graphic/lite/interfaces/kits/ui",
        "//foundation/graphic/lite/interfaces/kits/utils",
        "//foundation/graphic/lite/interfaces/kits/config",
        "//foundation/graphic/lite/interfaces/innerkits/ui",
        "//foundation/graphic/lite/hals/include",
        "//foundation/distributedschedule/interfaces/kits/samgr_lite/registry",
        "//foundation/distributedschedule/interfaces/kits/samgr_lite/samgr",
        "//foundation/communication/frameworks/ipc_lite/liteipc/include",
        "//kernel/liteos_a/kernel/include",
        "//kernel/liteos_a/kernel/common",
        "//third_party/bounds_checking_function/include",
        "//third_party/freetype/include",
        "//utils/native/lite/kv_store/innerkits",
        "//utils/native/lite/include",
        "//utils/native/lite/memory",
        "./include",
        "./",
    ]

    defines = [
        "OHOS_APPEXECFWK_BMS_BUNDLEMANAGER",
    ]

    if (enable_ohos_appexecfwk_feature_ability == true) {
        defines += [
            "ABILITY_WINDOW_SUPPORT"
        ]
    }
}

lite_component("aafwk_abilitykit_lite") {
    if (enable_ohos_appexecfwk_feature_ability == true) {
        public_configs = [
            ":abilitykit_config",
        ]
    }

    features = [
        ":ability",
    ]
}

config("abilitykit_config") {
    ldflags = [
        "-lstdc++",
        "-Wl,-rpath-link=$ohos_root_path/$root_out_dir",
    ]
}

ndk_lib("ability_notes") {
    lib_extension = ".so"
    deps = [
        ":ability",
        "//foundation/aafwk/frameworks/abilitymgr_lite:abilitymanager"
    ]
    head_files = [
        "//foundation/aafwk/interfaces/kits/ability_lite",
        "//foundation/aafwk/interfaces/kits/want_lite"
    ]
}
